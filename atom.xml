<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ChoutiHub]]></title>
  <link href="http://chouti.github.io/atom.xml" rel="self"/>
  <link href="http://chouti.github.io/"/>
  <updated>2013-08-11T18:35:25+08:00</updated>
  <id>http://chouti.github.io/</id>
  <author>
    <name><![CDATA[Chouti]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Write Good Test Cases]]></title>
    <link href="http://chouti.github.io/blog/2013/08/11/how-to-write-good-test-cases/"/>
    <updated>2013-08-11T14:13:00+08:00</updated>
    <id>http://chouti.github.io/blog/2013/08/11/how-to-write-good-test-cases</id>
    <content type="html"><![CDATA[<h1>如何用 Robotframework 来编写优秀的测试用例</h1>

<h2>介绍</h2>

<ul>
<li>这篇文档将会是一篇在「高层面」的怎么用 Robotframework 来编写优秀测试用例的原则。至于如何使用 Robotframework 来与您的待测试系统相作用这样的细节讨论是不包含在这篇文档中的。</li>
<li>最重要的一条原则就是保证测试用例对于（不？）熟悉这个领域的人来讲越简单越好。</li>
<li>关于这个主题的更多信息，你可以查看以下这些优秀的资源：

<ul>
<li><a href="http://cwd.dhemery.com/2009/11/wmaat">Writing Maintainable Automated Acceptance Tests</a> 作者：Dale H. Emery</li>
<li><a href="http://blog.codecentric.de/en/2010/07/how-to-structure-a-scalable-and-maintainable-acceptance-test-suite">How to Structure a Scalable And Maintainable Acceptance Test Suite</a> 作者：Andreas Ebbert-Karroum</li>
</ul>
</li>
</ul>


<h2>命名</h2>

<h3>测试套件的命名</h3>

<ul>
<li>套件的名称应该尽可能地描述这个套件的用途。</li>
<li>名称可以相对长一些，但是如果超过40个字那也太长了一些。</li>
<li>记住 Robotframework 的套件名称是直接从文件/目录的名字转换来的。文件的后缀名被去掉了而且下划线会被转换成空格，如果你的用到的单词都是小写的，那么开头字母会被转换成大写的。比如 login_test.txt 会被转换成 Login Tests, DHCP_and_DNS 会被转换成 DHCP and DNS。</li>
</ul>


<h3>测试用例的命名</h3>

<ul>
<li>测试用例的名字应该与套件的名字描述相似。</li>
<li>如果一个套件里包含了好多个相似的测试用例，而且测试套件本身已经很好地命名了，那么用例的名称可以简短一些。</li>
<li>在测试用例文件中的名称应该恰好表达了你需要做什么。</li>
</ul>


<p><img src="https://raw.github.com/chouti/octopress_img/master/test_case_nameing.png"></p>

<h3>关键词命名</h3>

<ul>
<li>同样的，关键词的名称也应该是清晰具体的。</li>
<li>应该可以表达这个关键词干了什么，而不是它如何去做。</li>
<li>关键词应该是非常不同的抽象层次（比如，「输入字符」或者「用户登录到系统」）。</li>
</ul>


<p><img src="https://raw.github.com/chouti/octopress_img/master/keywords_nameing.png"></p>

<h3>生成和分解的命名</h3>

<ul>
<li>试着用名称来描述这个步骤完成了什么。

<ul>
<li>或许你可以用一个已经存在的关键词</li>
</ul>
</li>
<li>如果生成或者分解包含了不相关的步骤，那么可以接受更抽象一点的名称。

<ul>
<li>在名称中列举步骤是一个重复化和维护的问题（比如：登入系统，添加用户，激活警报和检查平衡）。</li>
<li>或许需要用到一些通用一些的名称比如「初始化系统」</li>
</ul>
</li>
<li>每个用到这几个测试用例的人都需要明白这几个生成或者分解动作是干什么的。</li>
</ul>


<p><img src="https://raw.github.com/chouti/octopress_img/master/setup_teardown_naming.png"></p>

<h2>文档</h2>

<h3>测试套件的文档</h3>

<ul>
<li>通常把文档添加到包含测试用例的最底层套件中是一个不错的想法。

<ul>
<li>高层的套件不需要那么频繁地文档化。</li>
</ul>
</li>
<li>文档应该包含必要的背景信息，比如为什么要创建这些测试用例，测试环境中需要注意的点等等。</li>
<li>文档内容不要只是简单地重复套件的名称。

<ul>
<li>如果不是真的有文档还不如不添加文档。</li>
</ul>
</li>
<li>文档的内容不要包含关于测试用例的太详细的信息。

<ul>
<li>测试用例本身就应该足够清楚易懂了。</li>
<li>重复的信息是一种浪费，而且也不容易维护。</li>
</ul>
</li>
<li>文档中可以添加一些详细内容的链接。</li>
<li>如果你需要在文档中添加一些比如（版本：1.0 或者 OS：Linux）这样的「名称-值」组的话，可以考虑使用测试套件 metadata</li>
</ul>


<p><img src="https://raw.github.com/chouti/octopress_img/master/test_suite_doc_example.png"></p>

<h3>测试用例的文档</h3>

<ul>
<li>测试用例通常来说不需要文档。

<ul>
<li>套件名称和文档以及用例的名称已经提供了足够的背景信息。</li>
<li>测试用例的结构应该是不需要文档或者其他注释都足够清楚了的。</li>
</ul>
</li>
<li>Tag 通常比文档更灵活，还能提供更多的功能。</li>
<li>当测试用例的文档是有用的时候，也不要担心而不去添加哟。</li>
</ul>


<p><img src="https://raw.github.com/chouti/octopress_img/master/test_case_doc_example.png"></p>

<h3>用户自定义关键词文档</h3>

<ul>
<li>如果这个关键词非常简单明了的话，不需要文档。

<ul>
<li>好的名称和明确的结构就足以说明一切了。</li>
</ul>
</li>
<li>用户自定义关键词文档的一个重要的用途是用来记录参数和返回值的信息。</li>
<li>在 <a href="http://code.google.com/p/robotframework-ride/">RIDE</a>(比如在关键词补全的地方)以及在资源文件中显示的文档是由 <a href="http://code.google.com/p/robotframework/wiki/LibraryDocumentationTool">libdoc.py</a> 生成的。</li>
</ul>


<h2>测试套件的结构</h2>

<ul>
<li>在套件中的用例应该是互相相关的。

<ul>
<li>如果测试用例拥有同样的生成或者分解部分，那么他们应该是属于一个套件的。</li>
</ul>
</li>
<li>除非是数据驱动的，在一个套件中不要放10个以上的测试用例。</li>
<li>测试用例应该是独立的。

<ul>
<li>用生成和分解来初始化他们。</li>
</ul>
</li>
<li>有时候如果测试用例之间无法避免地相关联

<ul>
<li>比如说，它可能是因为把所有的用例独立出来要化太多的时间在初始化上。</li>
<li>相关联的测试用例就那么几个（最多4到5个）</li>
<li>下一个用例是用来验证上一个用例的结果的。（用${PREV TEST STATUS} 这个变量）</li>
</ul>
</li>
</ul>


<h2>测试用例的结构</h2>

<ul>
<li>测试用例应该是易懂的。</li>
<li>一个测试用例只测试一件事情。

<ul>
<li>当然，事情本身可大可小。</li>
</ul>
</li>
<li>选择一个合适的抽象层面。

<ul>
<li>一致地使用抽象水平（单一水平的抽象原则）</li>
<li>只包含与测试相关的信息。</li>
</ul>
</li>
<li>用例可以分为两种

<ul>
<li>工作流程的测试用例</li>
<li>数据驱动的测试用例</li>
</ul>
</li>
</ul>


<h3>工作流程的测试用例</h3>

<ul>
<li>通常来说有以下这些部分：

<ul>
<li>前置条件（可选，通常在生成部分）</li>
<li>动作 （对被测系统执行一些动作）</li>
<li>验证 （必须有一个验证的部分！）</li>
<li>清理 （可选，通常在分解部分，以保证用例已经执行完毕）</li>
</ul>
</li>
<li>关键词是用来描述这个用例做了什么。

<ul>
<li>用清晰的关键词名称和合适的抽象层次。</li>
<li>应该包含足够的信息使得手动执行可以启动。</li>
<li>应该从来不需要文档或者沟通来告诉你这个用例在做什么。</li>
</ul>
</li>
<li>不同的用例可以有不同的抽象层次。

<ul>
<li>详细的功能测试是更精确的。</li>
<li>端到端的测试可以是一个很高的抽象层次。</li>
<li>一个测试用例应该只使用一种抽象层次。</li>
</ul>
</li>
<li>不同的风格

<ul>
<li>对于底层的详细测试和集成测试用例来讲应该是更关注技术细节。</li>
<li>「可执行定义」来扮演需求。</li>
<li>使用领域中的语言（术语？）。</li>
<li>所有人（包括顾客和产品负责人）都应该可以看明白。</li>
</ul>
</li>
<li>不复杂的逻辑

<ul>
<li>不用 for 循环或者 if/else 判断结构。</li>
<li>小心给变量赋值。</li>
<li>测试用例不应该看起来像脚本一样难读。</li>
</ul>
</li>
<li>最多10步，越少越好。</li>
</ul>


<h3>数据驱动的测试用例</h3>

<ul>
<li>每个测试用例有一个高层次的关键词。

<ul>
<li>不同的参数创建不同的测试。</li>
<li>关键词通常包含了与同一个用例文件中工作流程测试用例中描述的流程类似的流程。</li>
</ul>
</li>
<li>推荐使用测试模板功能。

<ul>
<li>不需要多次地去重复关键词。</li>
<li>在一个用例里去测试更容易去测试多种变化。</li>
</ul>
</li>
<li>如果可能，推荐在列头部命名。</li>
<li>如果真的需要很多测试用例，考虑把他们做成依赖于外部的模型。</li>
</ul>


<p><img src="https://raw.github.com/chouti/octopress_img/master/data_driven_tests_example.png"></p>

<h2>用户定义关键词</h2>

<ul>
<li>应该容易让人理解

<ul>
<li>和工作流程测试用例一样的标准。</li>
</ul>
</li>
<li>不同的抽象层次。</li>
<li>可以包含一些编程逻辑（for 循环，if 判断这些）

<ul>
<li>特别对于底层的的关键词。</li>
<li>复杂的逻辑应该放在库里而不是用户定义的关键词里。</li>
</ul>
</li>
</ul>


<h2>变量</h2>

<ul>
<li>封装常的或者复杂的值。</li>
<li>从命令行传递信息。</li>
<li>在关键词之间传递信息。</li>
</ul>


<h3>变量的命名</h3>

<ul>
<li>清楚，但是不要太长。</li>
<li>可以在变量表格里用注释来说明。</li>
<li>对每个使用场景保持一致：

<ul>
<li>小写的本地变量只在当前的用例或者关键词中可用。</li>
<li>全局变量或者套件，用例级别的变量需要大写。</li>
<li>空格或者下划线都可以用来分割变量中的词。</li>
</ul>
</li>
<li>推荐在变量表格中也把设置成动态的变量也列出来。

<ul>
<li>用<code>Set Global/Suite/Test variable</code>关键词来命名变量。</li>
<li>变量的初始值应该可以解释真实的值应该是什么。</li>
</ul>
</li>
</ul>


<p><img src="https://raw.github.com/chouti/octopress_img/master/variable_naming_example.png"></p>

<h3>传递和返回值</h3>

<ul>
<li>通常的方式是通过关键词来返回值，把他们赋给变量，然后传递给其他关键词的参数。

<ul>
<li>清楚易懂地遵循这个方法。</li>
<li>看起来像是编程。</li>
</ul>
</li>
<li>备选方案是使用<code>Set Test Variable</code>关键词

<ul>
<li>不需要在测试用例层面上有什么编程风格。</li>
<li>要遵循起来比较复杂，很难重用关键词。</li>
<li>避免以下这种测试用例层级。</li>
</ul>
</li>
</ul>


<p><img src="https://raw.github.com/chouti/octopress_img/master/passing_and_returning_values.png"></p>

<h2>避免使用sleeping</h2>

<ul>
<li>Sleeping 是非常脆弱的。</li>
<li>平均来说，安全的边界值会使得 Sleeping 很长时间。</li>
<li>用包含了一定的动作触发的关键词来替代 Sleeping

<ul>
<li>等待需要有一个超时的值。</li>
<li>关键词可以用 <code>Wait Until…</code> 来开头</li>
<li>可能的话用<a href="http://code.google.com/p/robotframework/wiki/BuiltInLibrary">内置的关键词</a><code>Wait Until Keyword Succeeds</code>来包装其他关键词。</li>
</ul>
</li>
<li>有时候 Sleeping 是一种最简单的解决方式

<ul>
<li>请总是小心使用，不要在经常用到的自定义关键词或者其他关键词中用 Sleeping。</li>
</ul>
</li>
<li>在 Debugging 的时候 Sleeping 用来暂停测试执行还是很有用的。

<ul>
<li>虽然 <a href="http://code.google.com/p/robotframework/wiki/DialogsLibrary">DialogsLibrary</a> 通常更适合用来干这个。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Jenkins for Xcode project]]></title>
    <link href="http://chouti.github.io/blog/2013/07/12/setup-jenkins-for-xcode-project/"/>
    <updated>2013-07-12T16:20:00+08:00</updated>
    <id>http://chouti.github.io/blog/2013/07/12/setup-jenkins-for-xcode-project</id>
    <content type="html"><![CDATA[<p>目录：</p>

<ul>
<li><a href="http://chouti.github.io/blog/2013/07/11/how-to-setup-a-ci-server-using-jenkins/">How to Setup a CI Server Usining Jenkins</a></li>
</ul>


<p>之前一篇讲了怎么在一台 Mac mini 上搭建一个 Jenkins 的服务器。在搭建服务器的时候，我们就预计好了应该使用 Jenkins 来编译 iOS 的应用。<br/>
首先打开已经配置完成的 Jenkins 主页，按照默认的配置的话应该是 <a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a> 如下图：<br/>
<img src="https://raw.github.com/chouti/octopress_img/master/jenkins_dashboard.png"><br/>
Jenkins本身提供了很多的插件来支持各种各样的应用，从我们的目的出发需要在后台的 <a href="http://127.0.0.1:8080/pluginManager/?">Plugin Manager</a> 添加一下这些插件：</p>

<ul>
<li>Xcode integration</li>
<li>Git Plugin</li>
<li>cucumber-reports</li>
<li>Jenkins Mailer Plugin</li>
</ul>


<p>暂时先安装这四个吧，反正在 Jenkins 中添加插件很容易，要用到什么的时候再来这个界面下添加就好了。</p>

<p>有几个常用的 Jenkins 的 url 命令或许你有兴趣知道：</p>

<ul>
<li>重启 <a href="http://127.0.0.1:8080/restart">http://127.0.0.1:8080/restart</a></li>
<li>退出（关闭）<a href="http://127.0.0.1:8080/shutdown">http://127.0.0.1:8080/shutdown</a></li>
<li>重载配置 <a href="http://127.0.0.1:8080/reload">http://127.0.0.1:8080/reload</a></li>
</ul>


<p>如果不通过 URL,想在终端中操作 Jenkins 的话：</p>

<ul>
<li>Kill 掉 Jenkins 的那个进程 <code>ps -e | grep jenkins</code> 得到 <strong>PID</strong> 之后再 <code>sudo kill PID</code></li>
<li>启动 Jenkins <code>sudo launchctl load PATH/TO/JenkisPlist</code></li>
<li>停止 Jenkins <code>sudo launchctl unload PATH/TO/JenkinsPlist</code></li>
</ul>


<p>要想在 Jenkins 中创建一个任务来编译 Xcode 的项目，需要在 Jenkins 中先新建一个任务。选择 <code>Build a free-style software project</code> <br/>
<img src="https://raw.github.com/chouti/octopress_img/master/create_demoJob.png"><br/>
然后，在 <strong>Source Code Management</strong> 中选择 Git 类型（我们刚刚已经安装了 Git Plugin 了，记得吗？）<br/>
<img src="https://raw.github.com/chouti/octopress_img/master/git_setting.png"><br/>
填写正确的 Repository URL, 在 Branches to build 这里，你可以留空，留空意味着所有的分支都会被编译。当然，我建议可以准备一个 Release 分支，每次发布前都将代码合并到此分支，然后进行编译。当然，还有一些高级设置，在这里我们不做逐项解释了，如果有兴趣，可以慢慢再研究一下。<br/>
在接下来的 <strong>Build</strong> 部分，从下拉框中选中 Xcode 这个选项<br/>
<img src="https://raw.github.com/chouti/octopress_img/master/Select_xcode.png"><br/>
展开的设置界面，其实也就是 xcodebuild 命令行工具的参数设置界面。按照你需要的来配置这些参数就好，再这里不一一展开解释了，接下来的几篇日志中，会对用到的参数进行解释。<br/>
设置完成之后，点击 <strong>Save</strong> 来保存整个配置。<br/>
现在咱们去点击一下 <strong>Build Now</strong> 按钮来试试看。很有可能，你会遇到一个错误提示，git 没有正确的权限去代码仓库获取最新的代码。这是为什么呢？因为 Jenkins 在默认的设置下登录的用户是匿名用户，几乎肯定与你登录 Git 代码仓库的用户不是同一个。在设置中的 <strong>Configure Global Security</strong> 打勾 <strong>Enable security</strong> 然后选择 <strong>Unix user/group database</strong> 以及 <strong> Logged-in users can do anything</strong> 如此一来 Jenkins 就会使用当前登录系统的用户来登录，只要当前的系统用户有权限去获取 Git 仓库中的代码，就可以了。<br/>
今天，就先讲到这里吧。接下来的，咱们下篇再开讲。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to setup a CI server using Jenkins]]></title>
    <link href="http://chouti.github.io/blog/2013/07/11/how-to-setup-a-ci-server-using-jenkins/"/>
    <updated>2013-07-11T10:05:00+08:00</updated>
    <id>http://chouti.github.io/blog/2013/07/11/how-to-setup-a-ci-server-using-jenkins</id>
    <content type="html"><![CDATA[<p>这篇日志主要是想说一下前段时间我在搭建持续化集成环境时的一些心得体会。希望可以给还没有这样做过的测试工程师们有一点帮助。在阅读这篇日志的时候，我假设你是已经了解什么是持续化集成这个概念了。如果你对与这一点还不是很清楚，请猛击右侧的链接 <a href="http://en.wikipedia.org/wiki/Continuous_integration">Wiki:Continuous_intergration</a></p>

<h3>硬件</h3>

<p>因为考虑到持续化集成是整个团队的事情，而非依赖于一位单独的工程师去推动，所以想让这个服务跑在一台独立的硬件设备上。这里用到的是一台 <strong>Mac mini</strong> 搭载了 OS X 10.8 (Mountain Lion)，选择 Mac 而不是其他 PC 的原因是为了可以更多地覆盖到测试标的物，比如 iOS 的应用和 Android 的应用，甚至 Web 应用都可以用这台服务器来完成。</p>

<h3>设置 Jenkins</h3>

<p>安装 <a href="http://jenkins-ci.org">Jenkins</a> 有很多种方法，比如去它的项目页面下载源码自己编译。这里我想用一种比较快捷的方法：通过 <a href="http://mxcl.github.com/homebrew">Homebrew</a> 来安装，登入到服务器之后打开终端，输入：</p>

<pre><code>$ brew install jenkins
</code></pre>

<p>怎么样？简单吧！<br/>
因为这是一台独立的服务器，我希望 Jenkins 可以一直运行着，甚至在系统重启之后也可以自动运行起来。如此一来，需要在 “~/Library/LaunchAgents/” 创建一份名为 &ldquo;<strong>org.jenkins-ci.plist</strong>&rdquo; 的文件。文件内容如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'>  <span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; </span>
</span><span class='line'><span class="cp"> &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>KeepAlive<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>org.jenkins-ci<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;arrary&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>/usr/bin/java<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>-server<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>-d64<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>-XX:+UseG1GC<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>-Xms512m<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>-Xmx512m<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>-XX:MaxGCPauseMills=500<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>-jar<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>        <span class="nt">&lt;string&gt;</span>/usr/local/opt/jenkins/libexec/jenkins.war<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/arrary&gt;</span>
</span><span class='line'>      <span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>      <span class="nt">&lt;true/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一来，只要当前用户一登录系统，Jenkins 就可以自动启动运行了。至于这份 plist 中的那些参数的意义，或者说你还想再调整一些参数的话，也可以参考这个<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/java.html">链接</a>。<br/>
暂时，先写到这里吧。接下来的部分，会讲讲怎么调试 Jenkins 用来编译 Xcode 的项目。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[firstpost]]></title>
    <link href="http://chouti.github.io/blog/2013/04/17/firstpost/"/>
    <updated>2013-04-17T20:39:00+08:00</updated>
    <id>http://chouti.github.io/blog/2013/04/17/firstpost</id>
    <content type="html"><![CDATA[<p>下面让我们来写写我的第一篇 <strong>Blog</strong> 日志。</p>

<p>在这里，我想写一些不同于 <a href="http://www.ialog.com"><strong>i@log</strong></a> 的东西。因为这个 <em>blog</em> 托管在 <a href="http://www.github.com"><em>github</em></a> 所以，咱们还是讲点和代码相关的东西吧。</p>

<p>&mdash;EOF&mdash;</p>
]]></content>
  </entry>
  
</feed>
